<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.helper.store.dao.OrderMapper">
    <insert id="saveOrder" parameterType="map">
        insert into `order`(gs_id,order_no,create_time,status,address_id,buy_user_id,sell_user_id,price,want_id)value(#{gsId},#{orderNo},#{createTime},#{status},#{addressId},#{buyUserId},#{sellUserId},#{price},#{wantId})
    </insert>

    <update id="cancelOrder" parameterType="map">
        UPDATE `order`
        SET status = 4
        WHERE
            order_id = #{orderId}
    </update>

    <update id="restoreSell" parameterType="map">
         update goods
          set is_sell=0
        where gs_id=(select `order`.gs_id from `order` where `order`.order_id=#{orderId})
    </update>

    <update id="restoreSell2" parameterType="map">
        update want_buy
         set is_sell=0
         where want_id=(select want_buy.gs_id from want_buy where want_buy.want_id=#{wantId})

    </update>


    <update id="shoeSell" parameterType="map">
        update goods
          set is_sell=1
        where gs_id=#{gsId}
    </update>

    <update id="shoeSell2" parameterType="map">
        update want_buy
         set is_sell=1
         where want_id=#{wantId}
    </update>
    
    <update id="payOrder" parameterType="map">
        UPDATE `order`
        SET status = 1
        WHERE
            order_id = #{orderId}
    </update>
    
    <update id="inputTrackingNumber" parameterType="map">
        UPDATE `order`
        set status = 2,trackingnumber=#{trackingNumber}
        where
            order_id=#{orderId}
    </update>

    <select id="getTrackingNumber" parameterType="map" resultType="map">
        select trackingnumber
        from `order`
        where  order_id=#{orderId}
    </select>

    <select id="getOrderByBuyorsellId" parameterType="map" resultType="map">
        select shoe.*,`order`.*,goods.size,address.address,address.user_name,address.phone
        from `order`,shoe,goods,address
        WHERE
        goods.shoe_id=shoe.id and
        <choose>
            <when test="buyorsellId!=0" > buy_user_id=#{userId} </when>
            <otherwise> sell_user_id=#{userId} </otherwise>
        </choose>
        and `order`.gs_id=goods.gs_id
        and `order`.address_id=address.id
        order by `order`.create_time desc
    </select>

    <delete id="deleteOrder">
        DELETE
        FROM
            `order`
        WHERE
            order_id = #{orderId}
    </delete>

    <select id="getOrderByNo" parameterType="map" resultType="map">
        SELECT
           `order`.*,
            shoe.*,
            goods.size,
            address.address,
            address.user_name,
            address.phone
        FROM
            `order`,shoe,goods,address
        WHERE
            order_no = #{orderNo} and goods.shoe_id=shoe.id and `order`.gs_id=goods.gs_id
        and `order`.address_id=address.id
    </select>

    <update id="orderFinish" parameterType="map">
          UPDATE `order`
          set status=3
          where
           order_id=#{orderId}
    </update>

    <update id="sellUserBalance" parameterType="map">
         UPDATE `user`
      set `user`.balance=`user`.balance+(select price from goods where goods.gs_id=#{gsId})
        where `user`.id=#{sellUserId}
    </update>

    <update id="buyUserBalance" parameterType="map">
        UPDATE `user`
      set `user`.balance=`user`.balance-(select price from goods where goods.gs_id=#{gsId})
        where `user`.id=#{buyUserId}
    </update>

    <insert id="saveBuyUser" parameterType="map">
        insert into withdrawalrecord(user_id,create_time,minus) value (#{buyUserId},now(),#{price})
    </insert>

    <insert id="saveSellUser" parameterType="map">
        insert into withdrawalrecord(user_id,create_time,`add`) value (#{sellUserId},now(),#{price})
    </insert>

    <insert id="saveNotice" parameterType="map">
        insert into notice(order_id,notice_information,create_time) value (#{orderId},#{noticeInformation},now())
    </insert>

    <select id="selectNoticeBuy" parameterType="map" resultType="map">
       SELECT `order`.*,notice.create_time,notice_information from `order`,notice
       where notice.`read`=0 and `order`.order_id=notice.order_id and `order`.buy_user_id=#{userId}
       order by notice.notice_id desc
    </select>

    <select id="selectNoticeSell" parameterType="map" resultType="map">
       SELECT `order`.*,notice.create_time,notice_information from `order`,notice
       where notice.`read`=0 and `order`.order_id=notice.order_id and `order`.sell_user_id=#{userId}
       order by notice.notice_id desc
    </select>

    <update id="updateRead" parameterType="map">
        update notice
        set `read`=1
        where notice_id=#{noticeId}
    </update>

    <update id="updateOrderBuyUserId" parameterType="map">
        update `order`
        set transferbuy_user_id=#{transferBuyUserId},transfersell_user_id=#{transferSellUserId},transferprice=#{transferprice}
        where order_id=#{orderId}
    </update>

    <update id="canceOrderBuyUserId" parameterType="map">
        update `order`
        set transferbuy_user_id=0,transfersell_user_id=0,transferprice=0,status=5
        where order_id=#{orderId}
    </update>

    <update id="updatePrice" parameterType="map">
        update `order`
        set price=transferprice,buy_user_id=transferbuy_user_id,sell_user_id=transfersell_user_id
        where order_id=#{orderId}
    </update>


    <select id="selectUserInfo" parameterType="map" resultType="map">
        SELECT nickname,phone,id from `user` where phone=#{phone}
    </select>

    <update id="cancePrice" parameterType="map">
        update `order`
        set transferprice=0
        where order_id=#{orderId}
    </update>






</mapper>